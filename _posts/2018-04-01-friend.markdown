第一说明:友元的存在是为了突破类的访问权限而设计的。针对目标是封装后的对象。

友元存在的意义:如果设计初期就将友元考虑了进去，那就说明设计存在不合理，友元是为了在项目后期维护过程中功能扩展而引入的语法。

友元存在的特殊性:无视访问权限，可以直接操作所有数据。优点当然就是随意访问了，缺点当然也很明显，破坏了封装性，是类的成员失去了数据安全性。

友元的职能:既然友元可以突破访问权限，那么肯定可以对数据进行获取和修改了。访问友元需要的参数当然是目标对象本身了，不论从内存操作还是数据时效性来说肯定不是指针就是引用了。而修改友元需要的抱歉当然还需要包括目标对象本身，同时肯定也应该包括将要修改的源数据了。

友元是一个操作对象，而不是一个操作过程，友元包括友元函数，友元类，友元成员函数，从左到右对目标对象封装性的破坏依次减小，所以推荐顺序当然是从右到左了。

语法就不说了，自己去看书或者搜索，当然也可以学习下面的举例。

下面举例演示: